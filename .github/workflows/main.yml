name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'back/**'
      - 'front/**'
      - '.github/workflows/**'
      - 'docker-compose.yml'
      - 'sonar-project.properties'

jobs:
  # Détection des changements
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'back/**'
            - 'docker-compose.yml'
            - 'sonar-project.properties'
          frontend:
            - 'front/**'
            - 'docker-compose.yml'
          workflows:
            - '.github/workflows/**'

  # Validation des tests backend pour les PR
  validate-backend:
    name: Validate Backend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.workflows == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests
      run: |
        cd back
        mvn clean test
    
    - name: Check test results
      run: |
        cd back
        if [ -d "target/surefire-reports" ]; then
          echo "✅ Backend tests passed"
        else
          echo "❌ Backend tests failed"
          exit 1
        fi

  # Validation des tests frontend pour les PR
  validate-frontend:
    name: Validate Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: front/package-lock.json
    
    - name: Install dependencies
      run: |
        cd front
        npm ci
    
    - name: Run frontend tests
      run: |
        cd front
        npm run test -- --watch=false --browsers=ChromeHeadless
    
    - name: Build frontend
      run: |
        cd front
        npm run build

  # Validation de la qualité du code (version allégée pour les PR)
  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: [changes, validate-backend, validate-frontend]
    if: always() && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true') && (needs.validate-backend.result == 'success' || needs.validate-backend.result == 'skipped') && (needs.validate-frontend.result == 'success' || needs.validate-frontend.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests with coverage
      run: |
        cd back
        mvn clean test jacoco:report
    
    - name: SonarCloud Analysis for PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd back
        mvn sonar:sonar \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.pullrequest.key=${{ github.event.number }} \
          -Dsonar.pullrequest.branch=${{ github.head_ref }} \
          -Dsonar.pullrequest.base=${{ github.base_ref }}

  # Vérification que la construction Docker fonctionne
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [changes, validate-backend, validate-frontend]
    if: (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true') && (needs.validate-backend.result == 'success' || needs.validate-backend.result == 'skipped') && (needs.validate-frontend.result == 'success' || needs.validate-frontend.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test backend Docker build
      if: needs.changes.outputs.backend == 'true'
      run: |
        cd back
        docker build -t bobapp-backend-test .
    
    - name: Test frontend Docker build
      if: needs.changes.outputs.frontend == 'true'
      run: |
        cd front
        docker build -t bobapp-frontend-test .
    
    - name: Verify images
      run: |
        docker images | grep bobapp || echo "No bobapp images found"
        echo "✅ Docker images built successfully"

  # Résumé de la validation de la PR
  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-backend, validate-frontend, code-quality-check, docker-build-test]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.validate-backend.result }}" == "success" && 
              "${{ needs.validate-frontend.result }}" == "success" && 
              "${{ needs.code-quality-check.result }}" == "success" && 
              "${{ needs.docker-build-test.result }}" == "success" ]]; then
          echo "✅ All validation checks passed! PR is ready for review."
        else
          echo "❌ Some validation checks failed. Please fix the issues before merging."
          echo "Backend tests: ${{ needs.validate-backend.result }}"
          echo "Frontend tests: ${{ needs.validate-frontend.result }}"
          echo "Code quality: ${{ needs.code-quality-check.result }}"
          echo "Docker build: ${{ needs.docker-build-test.result }}"
          exit 1
        fi
